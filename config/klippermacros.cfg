[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}

[gcode_macro PRINT_END]
gcode:
    END_PRINT {rawparams}

[gcode_macro START_PRINT]
gcode:
    G28
    {% set BED_TEMP = params.BED|default(96)|float %}
    {% set TOOL_TEMP = params.EXTRUDER|default(200)|float %}
    M104 S{TOOL_TEMP} ;Standby the extruder
    M190 S{BED_TEMP} ;Wait for the bed
    M107  #disable fan
    #SKEW_PROFILE LOAD=my_skew_profile
    G21    ; set units n millimeters
    G90    ; use absolute coordinates
    M82    ; use absolute distances for extrusion
    G92 E0 ; reset extrusion distance
    G28 ;Home the printer
    BED_MESH_CALIBRATE
    G1 Z10 F3000 ; Move the nozzle near the bedv
    M190 S{BED_TEMP} ;Wait for bed
    M109 S{TOOL_TEMP} ;Wait for nozzle
    G92 E0 ;Reset Extruder
    #SKEW_PROFILE LOAD=my_skew_profile
    LINE_PURGE
    
[gcode_macro FILAMENT_START]
#description: Passes slicer variables to gcode variables to do things like PA adjust
gcode:
    {% set material = params.MATERIAL|default("PLA") %}
    {% set vendor = params.VENDOR|default("Unknown") %}
    {% set color = params.COLOR|default("Unknown") %}
    {% set pa_constant = {'PLA': 0.055, 'PETG': 0.055, 'ABS': 0.055, 'ASA': 0.1540, 'Nylon': 0.055, 'TPU': 0.055, 'PVB': 0.055}[material] %}
    {% set retraction_speed = {'PLA': 65, 'PETG': 65, 'ABS': 65, 'ASA': 65, 'Nylon': 65, 'TPU': 65, 'PVB': 65}[material] %}
    {% set detraction_speed = {'PLA': 65, 'PETG': 65, 'ABS': 65, 'ASA': 65, 'Nylon': 65, 'TPU': 65, 'PVB': 65}[material] %}
    {% set retraction = {'PLA': 0.4, 'PETG': 0.4, 'ABS': 0.4, 'ASA': 0.4, 'Nylon': 0.4, 'TPU': 0.4, 'PVB': 0.4}[material] %}

[gcode_macro CALCULATE_PA]
gcode:
    {% set material = params.MATERIAL|default("PLA") %}
    {% set bowden_length = (params.BOWDEN_LENGTH|default(5.5)|float) / 10 %}
    {% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
    {% set nozzle_size = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set print_speed = params.PRINT_SPEED|default(150)|float %}
    {% set material_constant = {'PLA': 100, 'PETG': 120, 'ABS': 110, 'ASA': 84, 'Nylon': 130, 'TPU': 150, 'PVB': 100}[material] %}
    {% set vfr = nozzle_size * layer_height * print_speed %}
    {% set pressure_advance = (vfr * bowden_length) / material_constant %}
    
    SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}

[gcode_macro BEFORE_LAYER_CHANGE]
# #BEFORE_LAYER_CHANGE 
# #   LAYER_NUM={layer_num} number of layer about to leave
# #   LAYER_Z={layer_z} mm of current laywer above bed
# #   LAYER_MAX_Z={max_layer_z} mm of total height abvoe bed
# #   MATERIAL={filament_type[current_extruder]} string
# #   NOZZLE_SIZE={nozzle_diameter[current_extruder]} 
# #   TOTAL_LAYER_COUNT={total_layer_count}
# #.  MAX_PRINT_SPEED={max_print_speed}
gcode:
    {% set layer_num_prev = params.LAYER_NUM|default(0) %} 
    {% set layer_h_prev = params.LAYER_Z|default(0)|float %} 
    {% set layer_h_max = params.LAYER_MAX_Z|default(100)|float %} 
    {% set material = params.MATERIAL|default("PLA") %} 
    {% set nozzle_size_prev = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set total_layer_count = params.TOTAL_LAYER_COUNT|default(3000)|float %} 
    {% set max_print_speed = params.MAX_PRINT_SPEED|default(150)|float %} 

[gcode_macro AFTER_LAYER_CHANGE]
# #AFTER_LAYER_NUM={layer_num} LAYWER_Z={layer_z} LAYWER_MAX_Z={max_layer_z}
description: After layer change housekeeping 
gcode:
    {% set layer_num_prev = params.LAYER_NUM|default(0) %} 
    {% set layer_h_prev = params.LAYER_Z|default(0)|float %} 
    {% set layer_h_max = params.LAYER_MAX_Z|default(100)|float %} 
    {% set material = params.MATERIAL|default("PLA") %} 
    {% set nozzle_size_prev = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set total_layer_count = params.TOTAL_LAYER_COUNT|default(3000)|float %} 
    {% set max_print_speed = params.MAX_PRINT_SPEED|default(150)|float %} 

[gcode_macro END_PRINT]
gcode:
    {% set bound = params.BOUND|default(20)|int %}
    {% set BED_MAX_X = printer.toolhead.axis_maximum.x - bound %}
	{% set BED_MAX_Y = printer.toolhead.axis_maximum.y - bound %}
    {% set BED_MAX_Z = printer.toolhead.axis_maximum.z - bound %}

    #DROP SKEW
    SET_SKEW CLEAR=1

    #HEATERS OFF
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91 ;releative positioning
    G1 X-2 Y-2 E-0.8 F3000
    # Raise nozzle by 10mm
    G1 Z10 F2000
    G90 ; Absolute Positioning
    G1 X{BED_MAX_X} Y{BED_MAX_Y} F1000 ;Present print

[gcode_macro CANCEL_PRINT]
 description: Cancel the actual running print
 rename_existing: CANCEL_PRINT_BASE 
 gcode:
    M400
   ##### get user parameters or use default #####
   {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
   {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
   {% set retract = client.cancel_retract|default(1)|abs %}
   {% set BED_TEMP = params.BED|default(60)|float %}
   {% set TOOL_TEMP = params.EXTRUDER|default(175)|float %}
   ##### define park position #####
   {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
             else "X=" ~ client.park_at_cancel_x %}
   {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
             else "Y=" ~ client.park_at_cancel_y %}
   {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
   ##### end of definitions #####
   # restore idle_timeout time if needed
   {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
     SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
   {% endif %}
   {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
   _CLIENT_RETRACT LENGTH={retract}
   TURN_OFF_HEATERS
   M106 S0
   {client.user_cancel_macro|default("")}
   SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
   # clear pause_next_layer and pause_at_layer as preparation for next print
   SET_PAUSE_NEXT_LAYER ENABLE=0
   SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
   CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
  else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[homing_override]
axes: xyz
set_position_z: 0
gcode:
    ######## CONFIGURATION VALUES #######
    {% set CURRENTLESS = 0 %}           # Set to 1 for regular homing
    {% set PROBE_X = 150 %}             # The X coordinate for safe z-homing
    {% set PROBE_Y = 150 %}             # The Y coordinate for safe z-homing
    {% set PROBE_XY_SPEED = 60 %}       # The travel speed when moving to those coordinates
    {% set MOVE_TO_PREVIOUS = False %}  # Save and return to the previous position after homing
    ############# NOTE ################## Set move to prev speed to 0 to use previous gcode speed
    {% set MOVE_TO_PREV_SPEED = 50 %}   # Speed at which to return to previous position
    {% set HOMING_BOUNCE = 20.0 %}       # The amount to "bounce" after hitting endstops
    {% set BOUNCE_SPEED = 25 %}         # The speed to "bounce" after hitting endstops
    {% set Z_HOP = 5 %}                 # The Z-hop distance after homing Z
    {% set Z_HOP_SPEED = 10 %}          # The speed of Z-hop after homing Z
    ############# NOTE ################## Only use current values within the specs of your steppers
    {% set X_HOMING_CUR = 0.88 %}      # The X-axis homing current (in Amps)
    {% set Y_HOMING_CUR = 0.88 %}      # The Y-axis homing current (in Amps)
    {% set HOMING_ACCEL = 700 %}        # The homing acceleration (in mm/s/s)
    ############ WARNING ################ The pause must be long enough for the drivers to apply the current
    {% set PAUSE = 1000 %}              # Miliseconds to pause after changing current
    ############ DANGER ################# Be careful with these as they are performed before homing
    {% set SAFETY_HOP = 10 %}           # The "unsafe" z-hop before homing XY
    {% set SAFETY_HOP_SPEED = 5 %}      # The "unsafe" z-hop speed
    #####################################

    # Read the current acceleration max
    {% set cur_accel = printer.toolhead.max_accel %}
    {% set cur_accel_to_decel = printer.toolhead.max_accel_to_decel %}
    # Read requested homing axis
    {% set requested = {'x': False,
                        'y': False,
                        'z': False} %}
    {% if   not 'X' in params
        and not 'Y' in params 
        and not 'Z' in params %}
        {% set X, Y, Z = True, True, True %}
    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
            {% set null = requested.update({'x': True}) %}
        {% endif %}       
        {% if 'Y' in params %}
            {% set Y = True %}
            {% set null = requested.update({'y': True}) %}
        {% endif %}     
        {% if 'Z' in params %}
            {% set Z = True %}
            {% set null = requested.update({'z': True}) %}
        {% endif %}        
    {% endif %}
    
    #STATUS_HOMING

    # Pre-homing "unsafe" z-hop to protect bed
    {% if not "xyz" in printer.toolhead.homed_axes %}
        G1 Z{SAFETY_HOP} F{(SAFETY_HOP_SPEED * 60)}
    {% endif %}

    # Save state for MOVE_TO_PREVIOUS
    {% if MOVE_TO_PREVIOUS %}
        SAVE_GCODE_STATE NAME=homing
    {% endif %}

    # X and Y homing
    {% if CURRENTLESS != 1 %}
        {% if X and Y %}
            SENSORLESS_HOME_ALL X_CUR={X_HOMING_CUR} Y_CUR={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% elif X %}
            SENSORLESS_HOME_X CURRENT={X_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% elif Y %}
            SENSORLESS_HOME_Y CURRENT={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% endif %}
    {% else %}
        {% if X and Y %}
            SENSOR_HOME_ALL ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% elif X %}
            SENSOR_HOME_X ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% elif Y %}
            SENSOR_HOME_Y ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% endif %}
    {% endif %}

    # Z Homing
    {% if Z %}
        G1 X{PROBE_X} Y{PROBE_Y} F{(PROBE_XY_SPEED * 60)} # Move to safe coordinates
        G28 Z # Home Z
        G1 Z{Z_HOP} F{(Z_HOP_SPEED * 60)} # Post z-home z-hop
    {% endif %}

    # Restore state for MOVE_TO_PREVIOUS
    {% if MOVE_TO_PREVIOUS %}
        {% if MOVE_TO_PREV_SPEED == 0 %}
            RESTORE_GCODE_STATE NAME=homing MOVE=1
        {% else %}
            RESTORE_GCODE_STATE NAME=homing MOVE=1 MOVE_SPEED={MOVE_TO_PREV_SPEED}
        {% endif %}
    {% endif %}

    # Reset any acceleration changes
    {% if printer.toolhead.max_accel != cur_accel %}
        SET_VELOCITY_LIMIT ACCEL={cur_accel} ACCEL_TO_DECEL={cur_accel_to_decel}
    {% endif %}

[gcode_macro SENSORLESS_HOME_ALL]
description: Home XY with modified current
gcode:
    {% set HOME_CUR_X = params.X_CUR|default(0.250)|float %}
    {% set HOME_CUR_Y = params.Y_CUR|default(0.250)|float %}
    {% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set driver_config_x = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set driver_config_y = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR_X = driver_config_x.run_current %}
    {% set RUN_CUR_Y = driver_config_y.run_current %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}

    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR_Y}
    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home X
    G28 X0
    {% if BOUNCE %}
        # Move away
        G91
        G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Home Y
    G28 Y0
    {% if BOUNCE %}
        # Move away
        G91
        G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR_Y}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}

[gcode_macro SENSORLESS_HOME_X]
description: Home X with modified current
gcode:
    {% set HOME_CUR = params.CURRENT|default(0.250)|float %}
    {% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}

    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home
    G28 X0
    {% if BOUNCE %}
        # Move away
        G91
        G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}

[gcode_macro SENSORLESS_HOME_Y]
description: Home Y with modified current
gcode:
    {% set HOME_CUR = params.CURRENT|default(0.250)|float %}
    {% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}
    
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home
    G28 Y0
    {% if BOUNCE %}
        # Move away
        G91
        G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}

[gcode_macro SENSOR_HOME_ALL]
description: Home XY
gcode:
    {% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}

    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home X
    G28 X0
    {% if BOUNCE %}
        # Move away
        G91
        G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Home Y
    G28 Y0
    {% if BOUNCE %}
        # Move away
        G91
        G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}

[gcode_macro SENSOR_HOME_X]
description: Home X
gcode:
    {% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}

    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home
    G28 X0
    {% if BOUNCE %}
        # Move away
        G91
        G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}

[gcode_macro SENSOR_HOME_Y]
description: Home Y
gcode:
    {% set HOME_ACCEL = params.ACCEL|default(1000)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}

    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home
    G28 Y0
    {% if BOUNCE %}
        # Move away
        G91
        G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}

[gcode_macro M600]
########### Gcode ############
gcode:
    {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
    {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
    {% set Z = params.Z|default(10)|int %}
    {% set E = params.E|default(-20)|int %}
    {% set tool = params.tool|default(0)|int %}
    PAUSE
    G91
    G1 E-5 F4000
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000 ;park position
    G0 E10 F500 ;extrude filament to get better blob on end
    G0 E{E} F600 ;retract additional filament to move out of melt zone
    G92 E0

[gcode_macro TEST_SPEED]
#EXAMPLE TEST_SPEED SPEED=1000 ACCEL=1000 ITERATIONS=1
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.minimum_cruise_ratio} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

